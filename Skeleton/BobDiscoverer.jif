public class BobDiscoverer [principal P] implements Discoverer [P] authority (P){
    public DiscoveryResult [q] {q->} discover {P <-;q<-;server<-}
    (Profile[{P ->; P <-}] {} x,
     principal  {} q,
     Profile[{q ->; q<-} ] {} y)
	where authority (P){
	Profile {q->} prof = generateProfile(x,q,y);
	
	final boolean {q->} condition = satisfiesCondition(x,q,y);

	if(condition){    
	    DiscoveryResult[q] {q->} res;
	    res = new DiscoveryResult[q](true,prof);    
	    return res;
	}
	DiscoveryResult[q] {q->} res;
	res = new DiscoveryResult[q](false,null);
	return res;
    }
    
    private boolean {q->} satisfiesCondition{P <-;q<-;server<-}
    (Profile[{P ->; P <-}] {} x,
     principal  {} q,
     Profile[{q ->; q<-} ] {} y)
     where authority(P){
	
	final int{q->} diff = getAgeDiff(x,q,y);
	
	try{
	    final boolean {q->} condition = (diff*diff)/diff<3;
	    return condition;
	}catch(ArithmeticException e){
	    final boolean {q->} condition = 0==diff;
	    return condition;
	}
    }
    
    private int {q->} getAgeDiff{P<-;q<-;server<-}
    (Profile[{P ->; P <-}] {} x,
     principal  {} q,
     Profile[{q ->; q<-} ] {} y)
	where authority(P){
	if(x==null || y==null)
	    return 1000;
	final int{q->} otherAge = declassify(y.yyyy,{q:} to {q->});
	final int{q->} bobAge = endorse(declassify(x.yyyy,{P:} to {}),{} to {q->});
	final int{q->} diff = otherAge-bobAge;
	return diff;
	
    }


    private Profile [{q->}] {q->} generateProfile{P <-;q<-;server<-}
    (Profile[{P ->; P <-}] {} x,
     principal  {} q,
     Profile[{q ->; q<-} ] {} y)
     where authority (P){
	final Profile [{q->}] {q->} prof = new Profile();
	if(x==null)
	    return prof;
	if(y==null)
	    return prof;
	final String {} name = declassify(x.name,{P:} to {});
	final int{} age = declassify(x.yyyy,{P:} to {});
	prof.name = name;
	prof.yyyy = age;
        return prof;
	
    }
}
