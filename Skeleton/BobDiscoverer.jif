public class BobDiscoverer [principal P] implements Discoverer [P] authority (P){
    public DiscoveryResult [q] {q->} discover {P <-;q<-;server<-}
    (Profile[{P ->; P <-}] {} x,
     principal  {} q,
     Profile[{q ->; q<-} ] {} y){
	Profile {q->} prof = generateProfile(x,q,y);
        
	if(satisfiesCondition(x,q,y)){    
	    return new DiscoveryResult[q](true,prof);    
	}else{
	    return new DiscoveryResult[q](false,null);
	}
    }
    
    private boolean {q->} satisfiesCondition{P <-;q<-;server<-}
    (Profile[{P ->; P <-}] {} x,
     principal  {} q,
     Profile[{q ->; q<-} ] {} y){
	int{q->} diff = getAgeDiff(x,q,y);	
	try{
	    return (diff*diff)/diff<3;	    
	}catch(ArithmeticException e){
	    return 0==diff;
	}
    }
    
    private int {q->} getAgeDiff{P<-;q<-;server<-}
    (Profile[{P ->; P <-}] {} x,
     principal  {} q,
     Profile[{q ->; q<-} ] {} y)
	where authority(P){
	if(x==null || y==null)
	    return 1000;
	int{q->} otherAge = declassify(y.yyyy,{q:} to {q->});
	int{q->} bobAge = endorse(declassify(x.yyyy,{P:} to {}),{} to {q->});
	int{q->} diff = otherAge-bobAge;
	return diff;
	
    }

    private Profile [{q->}] {q->} generateProfile{P <-;q<-;server<-}
    (Profile[{P ->; P <-}] {} x,
     principal  {} q,
     Profile[{q ->; q<-} ] {} y)
     where authority (P){
	Profile [{q->}] {q->} prof = new Profile();
	if(x==null || y==null)
	    return prof;
	prof.name = declassify(x.name,{P:} to {});
        prof.yyyy = declassify(x.yyyy,{P:} to {});
        return prof;	
    }
}
