// do we need authority P here ?
// it may be only needed in the Discoverer
// after all

import jif.util.ArrayList;
import java.io.PrintStream;


public class User [principal P] authority (P) {
    Profile [ {P -> ; P <-} ] {P<-} profile;

    private ArrayList [{ P-> } ] { P-> } queue =
					     new ArrayList [{ P-> } ] ();

    Discoverer [P] { P <- } discoverer;

    DiscoveryResult [q] { q -> }
    discover{P <-; q<-; server <-} (
    principal {} q,
    Profile [{q->; q<-}] {P <-; q <-; server<-} candidate){
	Discoverer[P] {P<-} discoverer = this.discoverer;
	if(discoverer==null)
	    return new DiscoveryResult[q](false,null);
	return discoverer.discover(profile,q,candidate);	  
    }
    
    
    void addProfileToBrowsingQueue{P->} (Profile[{P ->}]{P ->} p) {
        if(p==null){
	    return;
	}
	try{
	    queue.add(p);
	}catch(Exception e){}
    }

    void displayQueue{} (PrintStream[{}]{} out){	
	if(out==null)
	    return;
	out.println("Printing queue");
	
	//wonky old method, no touchie. 
	//it works, but displayQueue() needs authority(P)
	//String{} result = declassify(getRestrictedQueue(),{P->} to {});
	//out.print(result);
	
	String[] results = getQueue();
	if(results==null)
	    return;

	for(int{} i=0;i<results.length;i++){
	    try{
		String output = results[i];
		out.println(output);
	    }catch(IndexOutOfBoundsException e){
		//Never happens, jif is just stupid.
	    }
	}
    }

    /*Wonky old method, no touchie
      private String{P->} getRestrictedQueue{P->} (){
	final ArrayList[{P->}]{P->} queue = this.queue;
	String{P->} result = "";
	if(queue==null)
	    return "queue is null";
	for(int i=0;i<queue.size();i++){
	    try{
		JifObject[{P->}]{P->} prof = queue.get(i);
		result += i+1+":"+prof.toString()+"\n";
	    }catch(Exception e){}
	}	
	return result;
	}*/

    private String[]{} getQueue{} () where authority(P){
	ArrayList[{P->}]{} queue = declassify(this.queue, {P->} to {});
	String[]{} results = null;
	int{} length=0;
	try{
	    length = declassify(queue.size(),{P->} to {});
	    results = new String[length];
	}catch(Exception e){
	    //NullPointerException, Shouldn't happen. 
	    //The queue is private and intialised at object initialisation 
	
	    //NegativeArraySizeException, Never happens.
	    //si is the size of a list. That size can never be negative
	}
	for(int i=0;i<length;i++){
	    JifObject[{P->}]{P->} prof = null;
	    String{P->} restrictedString ="";
	    try{
	      	prof = queue.get(i);
		restrictedString = prof.toString();
	    }catch(Exception e){
		//NullPointerException. Never happens.
		//The only case where results wouldn't be initialised was if 
		//queue had already thrown a nullpointer, in which case the
		//loop wouln't have run

		//IndexOutOfBoundsException. Never happens
		//Never happens as queue is of size si, 
		//and the loop's upper bound is i<si
	    }

	    try{
	    	results[i] = declassify(restrictedString, {P->} to {});	  
	    }catch(Exception e){
		//NullPointerException. Never happens.
		//The only case where results wouldn't be initialised was if 
		//queue threw a nullpointer, in which case the loop wouln't
		//have run

		//IndexOutOfBoundsException. Never happens
		//Never happens as results[] is of size si, 
		//and the loop's upper bound is i<si
	    }
	}
	return results;
    }
}
