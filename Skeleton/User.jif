// do we need authority P here ?
// it may be only needed in the Discoverer
// after all

import jif.util.ArrayList;
import java.io.PrintStream;


public class User [principal P] authority (P) {
    Profile [ {P -> ; P <-} ] {P<-} profile;

    private ArrayList [{ P-> } ] { P-> } queue =
      new ArrayList [{ P-> } ] ();

    Discoverer [P] { P <- } discoverer;

    DiscoveryResult [q] { q -> }
    discover{P <-; q<-; server <-} (
      principal {} q,
      Profile [{q->; q<-}] {P <-; q <-; server<-} candidate)
      {
        // TODO: placeholder; finish this
	  try{
	      return discoverer.discover(profile,q,candidate);
	  }catch(NullPointerException npe){
	      return null;
	  }
    }


    void addProfileToBrowsingQueue{P->} (Profile[{P ->}]{P ->} p) {
	try{
	    queue.add(p);
	}catch(Exception e){}
    }

    void displayQueue{} (PrintStream[{P->}]{} out) 
    where authority(P){
	String{P->} res="";
	final ArrayList[{P->}]{P->}queue = this.queue;
	if(out==null||queue==null)
	    return;
	
	for(int i=0;i<queue.size();i++){
	    JifObject[{P->}]{P->} current;
	    try{
		current =  queue.get(i);
	    }catch(IndexOutOfBoundsException e){
		return;
	    }
	    Profile[{P->}]{P->} prof;
	    try{
		prof = ((Profile[{P->}])current);
	    }catch(ClassCastException e){
		return;
	    }
	    
	    if(prof==null)
		return;
	    
	    final String{P->} result = prof.toString();
	    res += declassify(result,{P->} to {});
	}
	
	String{} result = declassify(res,{P->} to {});

	out.println(result);	
    }
}
