// do we need authority P here ?
// it may be only needed in the Discoverer
// after all

import jif.util.ArrayList;
import java.io.PrintStream;


public class User [principal P] authority (P) {
    Profile [ {P -> ; P <-} ] {P<-} profile;

    private ArrayList [{ P-> } ] { P-> } queue =
      new ArrayList [{ P-> } ] ();

    Discoverer [P] { P <- } discoverer;

    DiscoveryResult [q] { q -> }
    discover{P <-; q<-; server <-} (
      principal {} q,
      Profile [{q->; q<-}] {P <-; q <-; server<-} candidate)
      {
	  Discoverer[P] {P<-} discoverer = this.discoverer;
          if(discoverer==null)
	      return new DiscoveryResult[q](false,null);
	  return discoverer.discover(profile,q,candidate);	  
    }


    void addProfileToBrowsingQueue{P->} (Profile[{P ->}]{P ->} p) {
        try{
	    queue.add(p);
	}catch(Exception e){
	    return;
	}
    }

    void displayQueue{} (PrintStream[{}]{} out){	
	if(out==null)
	    return;
	out.println("Printing queue");
	String{} result = getDeclassifiedQueue();
	out.print(result);
    }

    private String{} getDeclassifiedQueue{} () where authority(P){
        final ArrayList[{P->}]{P->}queue = this.queue;
	String{P->} q = getRestrictedQueue(queue);
	String{} result = declassify(q,{P->} to {});
	return result;
    }

    private String{P->} getRestrictedQueue{P->} (ArrayList[{P->}]{P->} queue){
	String{P->} result = "";
	if(queue==null)
	    return "queue is null";
	for(int{P->} i=0;i<queue.size();i++){
	    JifObject[{P->}]{P->} prof= null;
	    try{
		prof = queue.get(i);
	    }catch(IndexOutOfBoundsException e){
		continue;
	    }
	    if(prof==null){
		result +="Something went wrong";
		continue;
	    }
	    result += i+1+":"+prof.toString()+"\n";
	}    	
	return result;
    }
}
